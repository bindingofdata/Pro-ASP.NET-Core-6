@typeparam RowType

<link rel="stylesheet" href="errorBoundaries.css"/>

<div class="container-fluid">
    <div class="row p-2">
        <div class="col">
            <SelectFilter Title="@("Sort")" Values="@SortDirectionChoices"
                @bind-SelectedValue="SortDirectionSelection"/>
        </div>
        <div class="col">
            <ErrorBoundary>
                <SelectFilter Title="@("Highlight")" Values="@HighlightChoices()"
                    @bind-SelectedValue="HighlightSelection" />
            </ErrorBoundary>
        </div>
    </div>
</div>

<table class="table table-sm table-striped table-bordered">
    @if(Header != null)
    {
        <thead>@Header</thead>
    }
    <tbody>
        @if(RowTemplate != null)
        {
            @foreach (RowType item in SortedData())
            {
                <tr class="@IsHighlighted(item)">@RowTemplate(item)</tr>
            }
        }
    </tbody>
</table>

@code {
    [Parameter]
    public RenderFragment? Header { get; set; }

    [Parameter]
    public RenderFragment<RowType>? RowTemplate { get; set; }

    [Parameter]
    public IEnumerable<RowType>? RowData { get; set; } = Enumerable.Empty<RowType>();

    [Parameter]
    public Func<RowType, string> Highlight { get; set; } = (row) => String.Empty;

    public IEnumerable<string> HighlightChoices() =>
        RowData.Select(item => Highlight(item)).Distinct();

    public string? HighlightSelection { get; set; }

    public string IsHighlighted(RowType item) =>
        string.Equals(Highlight(item), HighlightSelection)
            ? "table-dark text-white"
            : string.Empty;

    [Parameter]
    public Func<RowType, string> SortDirection { get; set; } = (row) => string.Empty;

    public string[] SortDirectionChoices = new string[] { ASCENDING_STRING, "Descending" };

    public string SortDirectionSelection { get; set; } = ASCENDING_STRING;

    public IEnumerable<RowType> SortedData() =>
        string.Equals(SortDirectionSelection, ASCENDING_STRING)
            ? RowData.OrderBy(SortDirection)
            : RowData.OrderByDescending(SortDirection);

    private const string ASCENDING_STRING = "Ascending";
}
